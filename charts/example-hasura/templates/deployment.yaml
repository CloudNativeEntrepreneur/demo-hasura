{{- if .Values.knativeDeploy }}
{{- else }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.service.name }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
    spec:
      initContainers:
      - name: hasura-config-provider
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command:
        - sh
        args:
        - -c
        - |
          echo "Copying metadata..."
          mkdir -p /hasura-config/metadata
          cp -R /metadata/* /hasura-config/metadata
          echo "Copying migrations..."
          mkdir -p /hasura-config/migrations
          cp -R /metadata/* /hasura-config/migrations
          echo "Copying seeds..."
          mkdir -p /hasura-config/seeds
          cp -R /metadata/* /hasura-config/seeds
        volumeMounts:
          - name: {{ .Values.service.name }}
            mountPath: /hasura-config
      containers:
      - image: hasura/graphql-engine:v2.0.1.cli-migrations-v3
        name: {{ .Values.service.name }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
          protocol: TCP
        env:
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: hasura.example-hasura-postgresql.credentials.postgresql.acid.zalan.do
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hasura.example-hasura-postgresql.credentials.postgresql.acid.zalan.do
              key: password
        - name: POSTGRES_DATABASE
          value: hasura
        - name: POSTGRES_HOST
          value: example-hasura-postgresql
        - name: POSTGRES_PORT
          value: "5432"
        - name: HASURA_GRAPHQL_DATABASE_URL
          value: postgres://$(POSTGRES_USERNAME):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)
        ## enable the console served by server - need to run `hasura console` to access instead
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          value: "false"
        ## enable debugging mode. It is recommended to disable this in production
        - name: HASURA_GRAPHQL_DEV_MODE
          value: "true"
        - name: HASURA_GRAPHQL_MIGRATIONS_DIR
          value: /hasura-config/migrations
        - name: HASURA_GRAPHQL_METADATA_DIR
          value: /hasura-config/metadata
        - name: HASURA_GRAPHQL_SEEDS_DIR
          value: /hasura-config/seeds
    {{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
    {{- end }}
        # livenessProbe:
        #   httpGet:
        #     path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
        #   initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
        #   periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
        #   successThreshold: {{ .Values.livenessProbe.successThreshold }}
        #   timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        # readinessProbe:
        #   httpGet:
        #     path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
        #   periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        #   successThreshold: {{ .Values.readinessProbe.successThreshold }}
        #   timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: {{ .Values.service.name }}
          mountPath: /hasura-config
      volumes:
      - name: {{ .Values.service.name }}
        emptyDir: {}
{{- end }}